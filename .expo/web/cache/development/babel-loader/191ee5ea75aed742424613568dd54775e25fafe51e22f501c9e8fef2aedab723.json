{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport React, { useEffect, useState } from 'react';\nimport Row from \"../components/Row\";\nimport Player from \"./Player\";\nimport PlayerMinimized from \"./playerMinimized\";\nimport SpotifyRecommendations from \"../data/spotifyApi.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar HomeScreen = function HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n  var data = useState({});\n  useEffect(function () {\n    function getData() {\n      return _getData.apply(this, arguments);\n    }\n    function _getData() {\n      _getData = _asyncToGenerator(function* () {\n        if (token == '') {\n          token = yield getToken();\n        }\n        if (token != '') {\n          try {\n            var randomIndex = Math.floor(Math.random() * (genres.length - 1));\n            var response = yield fetch(`https://api.spotify.com/v1/search?q=${genres[randomIndex]}&type=album%2Cplaylist%2Cartist%2Ctrack`, {\n              method: 'GET',\n              headers: {\n                'Authorization': `Bearer ${token}`\n              }\n            });\n            var json = yield response.json();\n            console.log(json.tracks);\n            data = json.tracks;\n          } catch (error) {\n            console.error(error);\n          }\n        }\n      });\n      return _getData.apply(this, arguments);\n    }\n    getData();\n  }, []);\n  data = SpotifyRecommendations();\n  return _jsx(View, {\n    children: _jsxs(ScrollView, {\n      overScrollMode: \"never\",\n      children: [_jsx(Row, {\n        navigation: navigation,\n        tituloSeccion: \"Canciones\",\n        data: data\n      }), _jsx(Text, {})]\n    })\n  });\n};\nexport default HomeScreen;","map":{"version":3,"names":["React","useEffect","useState","Row","Player","PlayerMinimized","SpotifyRecommendations","jsx","_jsx","jsxs","_jsxs","HomeScreen","_ref","navigation","data","getData","_getData","apply","arguments","_asyncToGenerator","token","getToken","randomIndex","Math","floor","random","genres","length","response","fetch","method","headers","json","console","log","tracks","error","View","children","ScrollView","overScrollMode","tituloSeccion","Text"],"sources":["E:/Aplicaciones/MudsicApp0.5/src/screens/HomeScreen.js"],"sourcesContent":["import {View, Text, ScrollView} from 'react-native';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Row from '../components/Row';\r\nimport Player from './Player';\r\nimport PlayerMinimized from './playerMinimized';\r\nimport SpotifyRecommendations from '../data/spotifyApi.js'\r\n\r\nconst HomeScreen = ({ navigation }) => {\r\n    let data = useState({})\r\n    useEffect(() => {\r\n        async function getData(){\r\n            if (token == '') {\r\n                token = await getToken()\r\n            }\r\n            if (token != '') {\r\n                try {\r\n                    const randomIndex = Math.floor(Math.random() * (genres.length -1));\r\n                    const response = await fetch(`https://api.spotify.com/v1/search?q=${genres[randomIndex]}&type=album%2Cplaylist%2Cartist%2Ctrack`, {\r\n                            method: 'GET',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                    },\r\n                    });\r\n                    const json = await response.json();\r\n                    console.log(json.tracks)\r\n                    data = (json.tracks);\r\n                } catch (error) {\r\n                        console.error(error);\r\n                        // return json;\r\n                }\r\n            }\r\n        }\r\n        getData()\r\n        }, []);\r\n\r\n    data = SpotifyRecommendations()\r\n    // console.log(data)\r\n    return (\r\n        <View>\r\n            <ScrollView overScrollMode=\"never\">\r\n                <Row navigation={navigation} tituloSeccion=\"Canciones\" data={data} />\r\n                <Text>{}</Text>\r\n            </ScrollView>\r\n        </View>\r\n    );\r\n};\r\n\r\n\r\nexport default HomeScreen;\r\n\r\n"],"mappings":";;;;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG;AACV,OAAOC,MAAM;AACb,OAAOC,eAAe;AACtB,OAAOC,sBAAsB;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE1D,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAC5B,IAAIC,IAAI,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EACvBD,SAAS,CAAC,YAAM;IAAA,SACGc,OAAOA,CAAA;MAAA,OAAAC,QAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAAA,SAAAF,SAAA;MAAAA,QAAA,GAAAG,iBAAA,CAAtB,aAAwB;QACpB,IAAIC,KAAK,IAAI,EAAE,EAAE;UACbA,KAAK,SAASC,QAAQ,CAAC,CAAC;QAC5B;QACA,IAAID,KAAK,IAAI,EAAE,EAAE;UACb,IAAI;YACA,IAAME,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIC,MAAM,CAACC,MAAM,GAAE,CAAC,CAAC,CAAC;YAClE,IAAMC,QAAQ,SAASC,KAAK,CAAE,uCAAsCH,MAAM,CAACJ,WAAW,CAAE,yCAAwC,EAAE;cAC1HQ,MAAM,EAAE,KAAK;cACrBC,OAAO,EAAE;gBACL,eAAe,EAAG,UAASX,KAAM;cACrC;YACA,CAAC,CAAC;YACF,IAAMY,IAAI,SAASJ,QAAQ,CAACI,IAAI,CAAC,CAAC;YAClCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,MAAM,CAAC;YACxBrB,IAAI,GAAIkB,IAAI,CAACG,MAAO;UACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;YACRH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;UAE5B;QACJ;MACJ,CAAC;MAAA,OAAApB,QAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IACDH,OAAO,CAAC,CAAC;EACT,CAAC,EAAE,EAAE,CAAC;EAEVD,IAAI,GAAGR,sBAAsB,CAAC,CAAC;EAE/B,OACIE,IAAA,CAAC6B,IAAI;IAAAC,QAAA,EACD5B,KAAA,CAAC6B,UAAU;MAACC,cAAc,EAAC,OAAO;MAAAF,QAAA,GAC9B9B,IAAA,CAACL,GAAG;QAACU,UAAU,EAAEA,UAAW;QAAC4B,aAAa,EAAC,WAAW;QAAC3B,IAAI,EAAEA;MAAK,CAAE,CAAC,EACrEN,IAAA,CAACkC,IAAI,IAAS,CAAC;IAAA,CACP;EAAC,CACX,CAAC;AAEf,CAAC;AAGD,eAAe/B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}